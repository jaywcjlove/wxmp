{"version":3,"file":"static/js/9553.09ee519b.chunk.js","mappings":"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","sources":["../../node_modules/@codemirror/legacy-modes/mode/simple-mode.js","../../node_modules/@codemirror/legacy-modes/mode/factor.js"],"sourcesContent":["export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    mergeTokens: meta.mergeTokens,\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.dontIndentStates.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n","import {simpleMode} from \"./simple-mode.js\"\n\nexport const factor = simpleMode({\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --> state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --> state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    languageData: {\n      name: \"factor\",\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      commentTokens: {line: \"!\"}\n    }\n  });\n"],"names":["simpleMode","states","ensureState","states_","meta","languageData","hasIndentation","state","hasOwnProperty","list","orig","i","length","data","push","Rule","indent","dedent","name","startState","pending","copyState","s","slice","stack","token","tokenFunction","indentFunction","mergeTokens","Error","next","this","regex","val","caret","flags","RegExp","ignoreCase","source","String","toRegex","apply","replace","result","asToken","stream","pend","shift","pos","text","curState","rule","matches","sol","match","pop","indentation","indentUnit","j","backUp","join","textAfter","dontIndentStates","indexOf","rules","scan","dedentIfLineStart","m","exec","factor","start","vocabulary","string","string2","string3","commentTokens","line"],"sourceRoot":""}